# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\vinmayp\Desktop\Query Designer\NewImproved.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import warnings
import snowflake.connector
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
# from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QWidget, QComboBox
from RequiredClasses import Ui_QueryWindow, CheckableComboBox, TableModel

warnings.filterwarnings('ignore')  # setting ignore as a parameter

# Global variable for adding columns
ColumnCBCounter = 1
TableAlias1 = ''
TableAlias2 = ''
SelectColumnList = []

# Global variable for adding filters
FilterCounter = 1
FilterColumnList = []
FilterColumnTextList = []

# Global variable for adding tables
TableList = []
TableJoiningInfoList = []
ToolBoxPageCounter = 1
ToolBoxComboBoxCounter = 1
SelectedFullTableName = ''
FullTableName1 = ''
FullTableName2 = ''
Table = ''
Schema = ''
Database = ''

# Global Variable for SQL
QueryText = """Select"""

# Global Result tab counter
ResultTabCounter = 1


class Ui_MainWindow(QWidget, object):
    Counter = 0

    def __init__(self, QWidget, con):
        super().__init__()
        Ui_MainWindow.Counter += 1

        self.con = con
        self.DbComboBox = ''
        self.ShComboBox = ''
        self.TbComboBox = ''
        self.AlreadyLoaded = []

        self.QueryWindow = QtWidgets.QMainWindow()
        self.Query = Ui_QueryWindow()
        self.Query.setupUi(self.QueryWindow)
        self.Query.retranslateUi(self.QueryWindow)
        self.QueryWindow.show()
        self.QueryWindow.move(1390, 40)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1366, 900)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.jtabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.jtabWidget.setGeometry(QtCore.QRect(380, 60, 970, 350))
        self.jtabWidget.setObjectName("jtabWidget")

        self.jtab = QtWidgets.QWidget()
        self.jtab.setObjectName("jtab")

        self.jverticalLayout = QtWidgets.QVBoxLayout(self.jtab)
        self.jverticalLayout.setObjectName("jverticalLayout")

        self.jhorizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.jhorizontalLayout_2.setObjectName("jhorizontalLayout_2")

        self.jlabel = QtWidgets.QLabel(self.jtab)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        self.jlabel.setFont(font)
        self.jlabel.setObjectName("jlabel")
        self.jhorizontalLayout_2.addWidget(self.jlabel)
        self.jverticalLayout.addLayout(self.jhorizontalLayout_2)

        self.jpushButton = QtWidgets.QPushButton(self.jtab)
        self.jpushButton.setObjectName("jpushButton")
        self.jpushButton.setText('Apply')
        self.jpushButton.clicked.connect(self.SetTableJoiningInfo)
        self.jhorizontalLayout_2.addWidget(self.jpushButton)
        self.jhorizontalLayout_2.setStretch(0,8)

        self.jgridLayout = QtWidgets.QGridLayout()
        self.jgridLayout.setObjectName("jgridLayout")

        self.jcomboBox = QtWidgets.QComboBox(self.jtab)
        self.jcomboBox.setObjectName("comboBox")
        self.jgridLayout.addWidget(self.jcomboBox, 0, 0, 1, 1)

        self.jcomboBox_2 = QtWidgets.QComboBox(self.jtab)
        self.jcomboBox_2.setObjectName("jcomboBox_2")
        self.jcomboBox_2.addItems(['Yet To Select', 'FROM', 'LEFT JOIN', 'RIGHT JOIN', 'INNER JOIN', 'OUTER JOIN', 'CROSS JOIN'])
        self.jgridLayout.addWidget(self.jcomboBox_2, 0, 1, 1, 1)

        self.jcomboBox_3 = QtWidgets.QComboBox(self.jtab)
        self.jcomboBox_3.setObjectName("jcomboBox_3")
        self.jgridLayout.addWidget(self.jcomboBox_3, 0, 2, 1, 1)

        self.listWidget = QtWidgets.QListWidget(self.jtab)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        self.listWidget.setFont(font)
        self.listWidget.setObjectName("listWidget")
        self.jgridLayout.addWidget(self.listWidget, 1, 0, 1, 1)

        self.listWidget_2 = QtWidgets.QListWidget(self.jtab)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        self.listWidget_2.setFont(font)
        self.listWidget_2.setObjectName("listWidget2")
        self.jgridLayout.addWidget(self.listWidget_2, 1, 2, 1, 1)

        self.textEdit = QtWidgets.QTextEdit(self.jtab)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        self.textEdit.setFont(font)
        self.textEdit.setObjectName("textEdit")

        self.jgridLayout.addWidget(self.textEdit, 1, 1, 1, 1)
        self.jverticalLayout.addLayout(self.jgridLayout)
        self.jtabWidget.addTab(self.jtab, "")

        self.toolBox = QtWidgets.QToolBox(self.centralwidget)
        self.toolBox.setGeometry(QtCore.QRect(10, 50, 360, 450))
        self.toolBox.setObjectName("toolBox")
        self.toolBox.currentChanged.connect(self.SetDbComboBox)

        self.TableLabel = QtWidgets.QLabel(self.centralwidget)
        self.TableLabel.setGeometry(QtCore.QRect(10, 18, 100, 20))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.TableLabel.setFont(font)
        self.TableLabel.setObjectName("TableLabel")

        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(1107, 880, 250, 10))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")

        self.ResultSetLabel = QtWidgets.QLabel(self.centralwidget)
        self.ResultSetLabel.setGeometry(QtCore.QRect(380, 510, 83, 24))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.ResultSetLabel.setFont(font)
        self.ResultSetLabel.setObjectName("ResultSetLabel")

        self.runBTN = QtWidgets.QPushButton(self.centralwidget)
        self.runBTN.setGeometry(QtCore.QRect(1040, 500, 93, 40))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.runBTN.setFont(font)
        self.runBTN.setObjectName("runBTN")
        self.runBTN.clicked.connect(self.CreateResultTab)

        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(380, 540, 970, 331))
        self.tabWidget.setObjectName("tabWidget")

        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(10, 540, 360, 330))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.scrollArea.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")

        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 248, 328))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        # self.scrollAreaWidgetContents.se

        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout.setObjectName("verticalLayout")

        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        self.FilterLabel = QtWidgets.QLabel(self.centralwidget)
        self.FilterLabel.setGeometry(QtCore.QRect(10, 510, 83, 24))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.FilterLabel.setFont(font)
        self.FilterLabel.setObjectName("FilterLabel")

        self.scrollArea_2 = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea_2.setGeometry(QtCore.QRect(380, 420, 970, 71))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea_2.sizePolicy().hasHeightForWidth())
        self.scrollArea_2.setSizePolicy(sizePolicy)
        self.scrollArea_2.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.scrollArea_2.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")

        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 969, 69))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")

        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents_2)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)

        self.exportBTN = QtWidgets.QPushButton(self.centralwidget)
        self.exportBTN.setGeometry(QtCore.QRect(1260, 500, 93, 40))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.exportBTN.setFont(font)
        self.exportBTN.setObjectName("exportBTN")

        self.addTableBTN = QtWidgets.QPushButton(self.centralwidget)
        self.addTableBTN.setGeometry(QtCore.QRect(265, 18, 100, 28))
        self.addTableBTN.setObjectName("addTableBTN")
        self.addTableBTN.clicked.connect(self.AddTable)

        self.popoutBTN = QtWidgets.QPushButton(self.centralwidget)
        self.popoutBTN.setGeometry(QtCore.QRect(1150, 500, 93, 40))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.popoutBTN.setFont(font)
        self.popoutBTN.setObjectName("popoutBTN")

        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(552, 10, 530, 40))
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")

        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.groupBox_4)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")

        self.radioButton_4 = QtWidgets.QRadioButton(self.groupBox_4)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setObjectName("radioButton_4")
        self.horizontalLayout_3.addWidget(self.radioButton_4)

        self.radioButton_5 = QtWidgets.QRadioButton(self.groupBox_4)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setObjectName("radioButton_5")
        self.horizontalLayout_3.addWidget(self.radioButton_5)

        self.radioButton_6 = QtWidgets.QRadioButton(self.groupBox_4)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.radioButton_6.setFont(font)
        self.radioButton_6.setObjectName("radioButton_6")
        self.horizontalLayout_3.addWidget(self.radioButton_6)

        self.StatusLabel = QtWidgets.QLabel(self.centralwidget)
        self.StatusLabel.setGeometry(QtCore.QRect(10, 878, 581, 16))
        self.StatusLabel.setObjectName("StatusLabel")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.toolBox.setCurrentIndex(1)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Collecting Events
        self.listWidget.itemDoubleClicked.connect(lambda: self.FirstTableJoinKeys(self.listWidget.currentItem().text(), 'List1'))
        self.listWidget_2.itemDoubleClicked.connect(
            lambda: self.SecondTableJoinKeys(self.listWidget_2.currentItem().text(), 'List2'))
        self.jcomboBox.currentIndexChanged.connect(self.GetTableJoiningInfo)
        self.jcomboBox_2.currentIndexChanged.connect(self.SetTableJoinType)


    def GetDatabases(self):
        self.StatusLabel.setText('Running query to get Databases...')
        self.progressBar.setVisible(True)
        self.progressBar.setValue(40)
        query = """SELECT DATABASE_NAME FROM SNOWFLAKE.INFORMATION_SCHEMA.DATABASES GROUP BY 1;"""
        data = pd.read_sql(query, self.con)
        df = data.values.tolist()
        return df

    def GetSchemas(self):
        df = []
        try:
            self.StatusLabel.setText('Running query to get schemas...')
            self.progressBar.setValue(70)
            query = """SELECT SCHEMA_NAME FROM {}.INFORMATION_SCHEMA.SCHEMATA;""".format(
                eval(self.DbComboBox).currentText())
            data = pd.read_sql(query, self.con)
            df = data.values.tolist()
        except:
            print('Error Occurred in getting Schemas')
        return df

    def GetTables(self):
        df = []
        try:
            self.StatusLabel.setText('Running query to get tables...')
            self.progressBar.setValue(100)
            query = """SELECT TABLE_NAME FROM {}.INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '{}';""".format(
                eval(self.DbComboBox).currentText(), eval(self.ShComboBox).currentText())
            data = pd.read_sql(query, self.con)
            df = data.values.tolist()
        except:
            print('Error Occurred in getting Tables')

        self.StatusLabel.setText('Loaded')
        self.progressBar.setValue(0)
        self.progressBar.setVisible(False)
        return df

    def GetColumns(self):
        df = []
        try:
            query = """SELECT COLUMN_NAME FROM {}.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA =
            '{}' AND TABLE_NAME = '{}';""".format(eval(self.DbComboBox).currentText(),
                                                  eval(self.ShComboBox).currentText(),
                                                  eval(self.TbComboBox).currentText())
            data = pd.read_sql(query, self.con)
            df = data.values.tolist()
        except:
            print('Error Occurred in getting Tables')
        return df

    def FirstTableJoinKeys(self, column, list):
        global TableAlias1

        if self.radioButton_4.isChecked() == True:
            if self.textEdit.toPlainText().strip() == '':
                self.textEdit.setPlainText('ON ' + TableAlias1 + '.' + self.listWidget.currentItem().text() + '=')
            else:
                self.textEdit.setPlainText(self.textEdit.toPlainText() + 'AND ' + TableAlias1 + '.' + self.listWidget.currentItem().text() + '=')
        elif self.radioButton_5.isChecked() == True:
            self.AddFilters(column, list)
        elif self.radioButton_6.isChecked() == True:
            self.AddColumns(column, list)

    def SecondTableJoinKeys(self, column, list):
        global TableAlias2

        if self.radioButton_4.isChecked() == True:
            self.textEdit.setPlainText(
                self.textEdit.toPlainText() + TableAlias2 + '.' + self.listWidget_2.currentItem().text() + '\n')
        elif self.radioButton_5.isChecked() == True:
            self.AddFilters(column, list)
        elif self.radioButton_6.isChecked() == True:
            self.AddColumns(column, list)

    def SetDbComboBox(self):
        global Table, Schema, Database

        print('in DB combo box')
        try:
            print('Data in toolbox at page ' + str(
                self.AlreadyLoaded.index(self.toolBox.currentIndex()) + 1) + ' is already loaded.')
            if self.toolBox.currentIndex() == 0:
                self.DbComboBox = 'self.comboBox_1'
                self.ShComboBox = 'self.comboBox_2'
                self.TbComboBox = 'self.comboBox_3'
            else:
                self.DbComboBox = 'self.comboBox_' + str((self.toolBox.currentIndex() * 3) + 1)
                self.ShComboBox = 'self.comboBox_' + str((self.toolBox.currentIndex() * 3) + 2)
                self.TbComboBox = 'self.comboBox_' + str((self.toolBox.currentIndex() * 3) + 3)
            # Database = eval(self.DbComboBox).currentText()
            # print(eval(self.ShComboBox).currentText())
            # print(eval(self.TbComboBox).currentText())

        except:
            if self.toolBox.currentIndex() == 0:
                self.DbComboBox = 'self.comboBox_1'
            else:
                self.DbComboBox = 'self.comboBox_' + str((self.toolBox.currentIndex() * 3) + 1)
            DBs = self.GetDatabases()
            eval(self.DbComboBox).clear()
            for item in DBs:
                eval(self.DbComboBox).addItem(item[0])
            self.AlreadyLoaded.append(self.toolBox.currentIndex())
            print(eval(self.DbComboBox).currentText())
            print(eval(self.ShComboBox).currentText())
            print(eval(self.TbComboBox).currentText())

    def SetShComboBox(self):
        print('in sh combo box')
        if self.toolBox.currentIndex() == 0:
            self.ShComboBox = 'self.comboBox_2'
        else:
            self.ShComboBox = 'self.comboBox_' + str((self.toolBox.currentIndex() * 3) + 2)
        SHs = self.GetSchemas()
        eval(self.ShComboBox).clear()

        for item in SHs:
            eval(self.ShComboBox).addItem(item[0])
        print(eval(self.DbComboBox).currentText())
        print(eval(self.ShComboBox).currentText())
        print(eval(self.TbComboBox).currentText())

    def SetTbComboBox(self):
        print('in tb combo box')
        if self.toolBox.currentIndex() == 0:
            self.TbComboBox = 'self.comboBox_3'
        else:
            self.TbComboBox = 'self.comboBox_' + str((self.toolBox.currentIndex() * 3) + 3)
        TBs = self.GetTables()
        eval(self.TbComboBox).clear()
        for item in TBs:
            eval(self.TbComboBox).addItem(item[0])
        print(eval(self.DbComboBox).currentText())
        print(eval(self.ShComboBox).currentText())
        print(eval(self.TbComboBox).currentText())

    def DBComboChangedEvent(self):
        global Database

        Database = eval(self.DbComboBox).currentText()
        self.SetShComboBox()

    def SHComboChangedEvent(self):
        global Schema

        if eval(self.ShComboBox).currentText() == '':
            Schema = ''
        else:
            Schema = eval(self.ShComboBox).currentText()

        self.SetTbComboBox()

    def TBComboChangedEvent(self):
        global Table, Database, Schema, SelectedFullTableName, TableList, TableJoiningInfoList

        if eval(self.TbComboBox).currentText() == '':
            Table = ''
        else:
            Table = eval(self.TbComboBox).currentText()

        SelectedFullTableName = '"' + Database + '"."' + Schema + '"."' + Table + '"'

        TableInfoList = ['Yet To Select', SelectedFullTableName, '']

        try:
            TableList.pop(self.toolBox.currentIndex())
            TableList.insert(self.toolBox.currentIndex(), SelectedFullTableName)
            TableJoiningInfoList.pop(self.toolBox.currentIndex())
            TableJoiningInfoList.insert(self.toolBox.currentIndex(), TableInfoList)
        except:
            TableList.insert(self.toolBox.currentIndex(), SelectedFullTableName)
            TableJoiningInfoList.insert(self.toolBox.currentIndex(), TableInfoList)

        self.jcomboBox.clear()
        self.jcomboBox.addItems(TableList)

    def GetTableJoiningInfo(self):
        global TableList, TableJoiningInfoList

        CurrentTableNumber = self.jcomboBox.currentIndex()
        self.textEdit.setText(TableJoiningInfoList[CurrentTableNumber][2])
        self.jcomboBox_2.setCurrentText(TableJoiningInfoList[CurrentTableNumber][0])
        JoiningText = TableJoiningInfoList[CurrentTableNumber][0] + ' '\
                      + TableJoiningInfoList[CurrentTableNumber][1] + '\n' + TableJoiningInfoList[CurrentTableNumber][2]
        # print(JoiningText)

    def SetTableJoiningInfo(self):
        global TableList, TableJoiningInfoList

        CurrentTableNumber = self.jcomboBox.currentIndex()
        try:
            TableJoiningInfoList[CurrentTableNumber].pop(2)
            TableJoiningInfoList[CurrentTableNumber].insert(2, self.textEdit.toPlainText())
        except:
            TableJoiningInfoList[CurrentTableNumber].insert(2, self.textEdit.toPlainText())

        JoiningText = ''
        for item in TableJoiningInfoList:
            JoiningText = JoiningText + item[0] + ' ' + item[1] + ' ' + str(str(item[1]).split('.')[-1]).strip('"') + '\n' + item[2] + '\n\n '
        self.Query.TtextEdit.setText(JoiningText)


    def SetTableJoinType(self):
        global TableList, TableJoiningInfoList

        CurrentTableNumber = self.jcomboBox.currentIndex()
        try:
            TableJoiningInfoList[CurrentTableNumber].pop(0)
            TableJoiningInfoList[CurrentTableNumber].insert(0, self.jcomboBox_2.currentText())
        except:
            TableJoiningInfoList[CurrentTableNumber].insert(0, self.jcomboBox_2.currentText())

        JoiningText = TableJoiningInfoList[CurrentTableNumber][0] + ' ' \
                      + TableJoiningInfoList[CurrentTableNumber][1] + '\n' + TableJoiningInfoList[CurrentTableNumber][2]
        # print(JoiningText)

    def SetPageName(self):
        self.toolBox.setItemText(self.toolBox.currentIndex(), eval(self.TbComboBox).currentText())

    def SetClList(self, ListName=''):
        global Database, Schema, Table, TableAlias1, TableAlias2, FullTableName1, FullTableName2
        CLs = self.GetColumns()
        if ListName == 'List1':
            TableAlias1 = Table
            print('List 1: %s' % Table)
            FullTableName1 = '"' + Database + '"."' + Schema + '"."' + Table + '"'
            self.listWidget.clear()
            for item in CLs:
                self.listWidget.addItem(item[0])
        elif ListName == 'List2':
            TableAlias2 = Table
            print('List 2: %s' % Table)
            FullTableName2 = '"' + Database + '"."' + Schema + '"."' + Table + '"'
            self.listWidget_2.clear()
            for item in CLs:
                self.listWidget_2.addItem(item[0])

    def AddFilters(self, column, list):
        global FilterCounter, FilterColumnList, FilterColumnTextList, SelectedFullTableName, TableAlias1, TableAlias2

        CN = ''
        if list == 'List1':
            CN = TableAlias1 + '.' + column
        elif list == 'List2':
            CN = TableAlias2 + '.' + column

        if FilterColumnList.count(CN):
            print('Filter to column %s already present' % CN)
        else:
            font = QtGui.QFont()
            font.setFamily("Calibri")
            font.setPointSize(10)
            font.setWeight(50)

            exec("""self.fgroupBox_%d = QtWidgets.QGroupBox()""" % FilterCounter)
            exec("""self.fgroupBox_%d.setObjectName('fgroupBox_%d')""" % (FilterCounter, FilterCounter))
            exec("""self.fgroupBox_%d.setTitle('%s')""" % (FilterCounter, CN))
            exec("""self.verticalLayout.addWidget(self.fgroupBox_%d)""" % FilterCounter)

            exec("""self.fgridLayout_%d = QtWidgets.QGridLayout(self.fgroupBox_%d)""" % (FilterCounter, FilterCounter))
            exec("""self.fgridLayout_%d.setObjectName('fgridLayout_%d')""" % (FilterCounter, FilterCounter))

            exec("""self.ggridLayout_%d = QtWidgets.QGridLayout()""" % FilterCounter)
            exec("""self.ggridLayout_%d.setObjectName('ggridLayout_%d')""" % (FilterCounter, FilterCounter))
            exec("""self.ggridLayout_%d.setColumnStretch(0, 5)""" % FilterCounter)
            exec("""self.ggridLayout_%d.setColumnStretch(1, 5)""" % FilterCounter)
            exec("""self.fgridLayout_%d.addLayout(self.ggridLayout_%d, 1, 0, 1, 1)""" % (FilterCounter, FilterCounter))

            exec("""self.rpushButton_%d = QtWidgets.QPushButton()""" % FilterCounter)
            exec("""self.rpushButton_%d.setObjectName('rpushButton_%d')""" % (FilterCounter, FilterCounter))
            exec("""self.rpushButton_%d.setGeometry(0, 0, 40, 30)""" % FilterCounter)
            exec("""self.rpushButton_%d.setText('R')""" % FilterCounter)
            exec("""self.ggridLayout_%d.addWidget(self.rpushButton_%d, 0, 0, 1, 1)""" % (FilterCounter, FilterCounter))

            exec("""self.apushButton_%d = QtWidgets.QPushButton()""" % FilterCounter)
            exec("""self.apushButton_%d.setObjectName('apushButton_%d')""" % (FilterCounter, FilterCounter))
            exec("""self.apushButton_%d.setGeometry(0, 0, 40, 30)""" % FilterCounter)
            exec("""self.apushButton_%d.setText('A')""" % FilterCounter)
            eval("""self.apushButton_%d""" % FilterCounter).clicked.connect(self.GetFilterValues)
            exec("""self.ggridLayout_%d.addWidget(self.apushButton_%d, 0, 1, 1, 1)""" % (FilterCounter, FilterCounter))

            exec("""self.xpushButton_%d = QtWidgets.QPushButton()""" % FilterCounter)
            exec("""self.xpushButton_%d.setObjectName('xpushButton_%d')""" % (FilterCounter, FilterCounter))
            exec("""self.xpushButton_%d.setGeometry(0, 0, 40, 30)""" % FilterCounter)
            exec("""self.xpushButton_%d.setText('X')""" % FilterCounter)
            eval("""self.xpushButton_%d""" % FilterCounter).clicked.connect(self.DeleteFilters)
            exec("""self.fgridLayout_%d.addWidget(self.xpushButton_%d, 0, 0, 1, 1)""" % (FilterCounter, FilterCounter))

            exec("""self.fcomboBox_%d = CheckableComboBox()""" % FilterCounter)
            exec("""self.fcomboBox_%d.setFont(font)""" % FilterCounter)
            exec("""self.fcomboBox_%d.setObjectName('fcomboBox_%d')""" % (FilterCounter, FilterCounter))
            exec("""self.fgridLayout_%d.addWidget(self.fcomboBox_%d, 2, 0, 1, 1)""" % (FilterCounter, FilterCounter))
            self.SetFilterComboBox(column, "self.fcomboBox_%d" % FilterCounter, list)

            FilterColumnList.insert(FilterCounter-1, CN)
            FilterColumnTextList.insert(FilterCounter-1, '')
            FilterCounter += 1

    def DeleteFilters(self):
        global FilterColumnList, FilterColumnTextList

        ItemNumber = self.sender().objectName().split('_')[-1]

        FilterColumnList.pop(int(ItemNumber)-1)
        FilterColumnList.insert(int(ItemNumber)-1, '')
        FilterColumnTextList.pop(int(ItemNumber)-1)
        FilterColumnTextList.insert(int(ItemNumber)-1, '')

        ft = 'WHERE 1=1\n'
        for item in FilterColumnTextList:
            ft = ft + item + '\n'

        self.Query.FtextEdit.setText(ft)

        eval("""self.fgroupBox_%d """ % (int(ItemNumber))).deleteLater()

    def GetFilterValues(self):
        global FilterColumnList, FilterColumnTextList

        ItemNumber = self.sender().objectName().split('_')[-1]
        comboBox = 'self.fcomboBox_' + ItemNumber
        FVs = []

        for i in range(eval(comboBox).count()):
            if eval(comboBox).itemChecked(i) == True:
                FVs.append(eval(comboBox).itemText(i))

        FilterColumn = eval('self.fgroupBox_' + ItemNumber).title()

        if len(FVs) == 0:
            print('No Values selected for %s' % FilterColumn)
        else:
            try:
                FilterColumnTextList.pop(int(ItemNumber)-1)
            except:
                print('There is no existing filter for %s' % FilterColumn)

            ft = ''
            ft = ft + 'AND ' + FilterColumn + " in ('"

            i = 1
            FVmxlen = len(FVs)
            for item in FVs:
                if i == FVmxlen:
                    ft = ft + item + "')\n"
                else:
                    ft = ft + item + "', '"
                i += 1
            FilterColumnTextList.insert(int(ItemNumber)-1, ft)

            ft = 'WHERE 1=1\n'
            for item in FilterColumnTextList:
                ft = ft + item + '\n'

            self.Query.FtextEdit.setText(ft)

    def SetFilterComboBox(self, column, combobox, list):
        global FullTableName1, FullTableName2

        df = []
        try:
            query = ''
            if list == 'List1':
                query = """SELECT TOP  200  {} FROM {} group by 1;""".format(column, FullTableName1)
            elif list == 'List2':
                query = """SELECT TOP  200  {} FROM {} group by 1;""".format(column, FullTableName2)
            print(query)
            data = pd.read_sql(query, self.con)
            df = data.values.tolist()
        except:
            print('Error Occurred in getting filter values')

        i = 0
        for item in df:
            eval(combobox).addItem(str(item[0]))
            eval(combobox).setItemChecked(i, False)
            i += 1

        # return df

    def AddColumns(self, column, list):
        global ColumnCBCounter, TableAlias1, TableAlias2, SelectColumnList

        cn = ''
        if list == 'List1':
            cn = TableAlias1 + '.' + column
        elif list == 'List2':
            cn = TableAlias2 + '.' + column

        if SelectColumnList.count(cn) > 0:
            print('Column %s already present' % cn)
        else:
            font = QtGui.QFont()
            font.setFamily("Calibri")
            font.setPointSize(10)

            exec("""self.CpushButton_%d = QtWidgets.QPushButton(self.scrollAreaWidgetContents_2)""" % ColumnCBCounter)
            exec("""self.CpushButton_%d.setObjectName('CpushButton_%d')""" % (ColumnCBCounter, ColumnCBCounter))
            eval("""self.CpushButton_%d""" % ColumnCBCounter).setText(cn)
            exec("""self.CpushButton_%d.setFont(font)""" % ColumnCBCounter)
            exec("""self.horizontalLayout_2.addWidget(self.CpushButton_%d)""" % ColumnCBCounter)
            exec("""self.CpushButton_%d.clicked.connect(self.DeleteColumns)""" % ColumnCBCounter)

            SelectColumnList.append(cn)

            SelectColumnText = 'Select\n'
            MaxLength = len(SelectColumnList)
            i = 1
            for item in SelectColumnList:
                if i == MaxLength:
                    SelectColumnText = SelectColumnText + item
                else:
                    SelectColumnText = SelectColumnText + item + ',\n'
                i += 1

            self.Query.CtextEdit.setText(SelectColumnText)
            ColumnCBCounter += 1

    def DeleteColumns(self):
        global SelectColumnList

        cn = self.sender().objectName()
        SelectColumnList.remove(eval('self.' + cn).text())

        self.sender().deleteLater()

        SelectColumnText = 'Select\n'
        MaxLength = len(SelectColumnList)
        i = 1
        for item in SelectColumnList:
            if i == MaxLength:
                SelectColumnText = SelectColumnText + item
            else:
                SelectColumnText = SelectColumnText + item + ',\n'
            i += 1

        self.Query.CtextEdit.setText(SelectColumnText)

    def AddTable(self):
        global ToolBoxPageCounter
        global ToolBoxComboBoxCounter

        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setWeight(50)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        exec("""self.page_%d = QtWidgets.QWidget()""" % ToolBoxPageCounter)
        exec("""self.page_%d.setGeometry(QtCore.QRect(0, 0, 250, 389))""" % ToolBoxPageCounter)
        exec("""self.page_%d.setObjectName("page_%d")""" % (ToolBoxPageCounter, ToolBoxPageCounter))

        # print('page_%d' % ToolBoxPageCounter)

        exec("""self.gridLayout_%d = QtWidgets.QGridLayout(self.page_%d)""" % (ToolBoxPageCounter, ToolBoxPageCounter))
        exec("""self.gridLayout_%d.setObjectName('gridLayout_%d')""" % (ToolBoxPageCounter, ToolBoxPageCounter))

        # print('gridLayout_%d' % ToolBoxPageCounter)

        exec("""self.groupBox_%d = QtWidgets.QGroupBox(self.page_%d)""" % (ToolBoxPageCounter, ToolBoxPageCounter))
        exec("""self.groupBox_%d.setObjectName('groupBox_%d')""" % (ToolBoxPageCounter, ToolBoxPageCounter))
        exec("""self.groupBox_%d.setTitle('groupBox_%d')""" % (ToolBoxPageCounter, ToolBoxPageCounter))
        exec("""self.groupBox_%d.setSizePolicy(sizePolicy)""" % ToolBoxPageCounter)
        exec(
            """self.gridLayout_%d.addWidget(self.groupBox_%d, 1, 0, 1, 1)""" % (ToolBoxPageCounter, ToolBoxPageCounter))

        # print('groupBox_%d' % ToolBoxPageCounter)

        exec("""self.formLayout_%d = QtWidgets.QFormLayout(self.groupBox_%d)""" % (
        ToolBoxPageCounter, ToolBoxPageCounter))
        exec("""self.formLayout_%d.setObjectName('formLayout_%d')""" % (ToolBoxPageCounter, ToolBoxPageCounter))

        # print('formLayout_%d' % ToolBoxPageCounter)

        exec("""self.pushButton_%d = QtWidgets.QPushButton(self.page_%d)""" % (
        ToolBoxComboBoxCounter, ToolBoxPageCounter))
        exec("""self.pushButton_%d.setObjectName('pushButton_%d')""" % (ToolBoxComboBoxCounter, ToolBoxComboBoxCounter))
        exec("""self.pushButton_%d.setText('Close')""" % ToolBoxComboBoxCounter)
        exec("""self.gridLayout_%d.addWidget(self.pushButton_%d, 0, 0, 1, 1)""" % (
        ToolBoxPageCounter, ToolBoxComboBoxCounter))

        # print('close_button_%d' % ToolBoxComboBoxCounter)

        exec("""self.label_%d = QtWidgets.QLabel(self.groupBox_%d)""" % (ToolBoxComboBoxCounter, ToolBoxPageCounter))
        exec("""self.label_%d.setFont(font)""" % ToolBoxComboBoxCounter)
        exec("""self.label_%d.setObjectName('label_%d')""" % (ToolBoxComboBoxCounter, ToolBoxComboBoxCounter))
        exec("""self.label_%d.setText('Database')""" % ToolBoxComboBoxCounter)
        exec("""self.formLayout_%d.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_%d)""" % (
        ToolBoxPageCounter, ToolBoxComboBoxCounter))

        # print('label_database_%d' % ToolBoxComboBoxCounter)

        exec("""self.comboBox_%d = QtWidgets.QComboBox(self.groupBox_%d)""" % (
        ToolBoxComboBoxCounter, ToolBoxPageCounter))
        exec("""self.comboBox_%d.setFont(font)""" % ToolBoxComboBoxCounter)
        exec("""self.comboBox_%d.setObjectName('comboBox_%d')""" % (ToolBoxComboBoxCounter, ToolBoxComboBoxCounter))
        exec("""self.formLayout_%d.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.comboBox_%d)""" % (
        ToolBoxPageCounter, ToolBoxComboBoxCounter))
        exec("""self.comboBox_%d.currentIndexChanged.connect(self.DBComboChangedEvent)""" % ToolBoxComboBoxCounter)

        # print('combo_database_%d' % ToolBoxComboBoxCounter)

        ToolBoxComboBoxCounter += 1

        exec("""self.label_%d = QtWidgets.QLabel(self.groupBox_%d)""" % (ToolBoxComboBoxCounter, ToolBoxPageCounter))
        exec("""self.label_%d.setFont(font)""" % ToolBoxComboBoxCounter)
        exec("""self.label_%d.setObjectName('label_%d')""" % (ToolBoxComboBoxCounter, ToolBoxComboBoxCounter))
        exec("""self.label_%d.setText('Schema')""" % ToolBoxComboBoxCounter)
        exec("""self.formLayout_%d.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_%d)""" % (
        ToolBoxPageCounter, ToolBoxComboBoxCounter))

        # print('label_schema_%d' % ToolBoxComboBoxCounter)

        exec("""self.comboBox_%d = QtWidgets.QComboBox(self.groupBox_%d)""" % (
        ToolBoxComboBoxCounter, ToolBoxPageCounter))
        exec("""self.comboBox_%d.setFont(font)""" % ToolBoxComboBoxCounter)
        exec("""self.comboBox_%d.setObjectName('comboBox_%d')""" % (ToolBoxComboBoxCounter, ToolBoxComboBoxCounter))
        exec("""self.formLayout_%d.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.comboBox_%d)""" % (
        ToolBoxPageCounter, ToolBoxComboBoxCounter))
        exec("""self.comboBox_%d.currentIndexChanged.connect(self.SHComboChangedEvent)""" % ToolBoxComboBoxCounter)

        # print('combo_schema_%d' % ToolBoxComboBoxCounter)

        exec("""self.pushButton_%d = QtWidgets.QPushButton(self.groupBox_%d)""" % (
        ToolBoxComboBoxCounter, ToolBoxPageCounter))
        exec("""self.pushButton_%d.setObjectName('pushButton_%d')""" % (ToolBoxComboBoxCounter, ToolBoxComboBoxCounter))
        exec("""self.pushButton_%d.setText('Table1')""" % ToolBoxComboBoxCounter)
        eval("""self.pushButton_%d""" % ToolBoxComboBoxCounter).clicked.connect(lambda: self.SetClList('List1'))
        exec("""self.formLayout_%d.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.pushButton_%d)""" % (
        ToolBoxPageCounter, ToolBoxComboBoxCounter))

        # print('pushButton_%d' % ToolBoxComboBoxCounter)

        ToolBoxComboBoxCounter += 1

        exec("""self.label_%d = QtWidgets.QLabel(self.groupBox_%d)""" % (ToolBoxComboBoxCounter, ToolBoxPageCounter))
        exec("""self.label_%d.setFont(font)""" % ToolBoxComboBoxCounter)
        exec("""self.label_%d.setObjectName('label_%d')""" % (ToolBoxComboBoxCounter, ToolBoxComboBoxCounter))
        exec("""self.label_%d.setText('Table')""" % ToolBoxComboBoxCounter)
        exec("""self.formLayout_%d.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_%d)""" % (
        ToolBoxPageCounter, ToolBoxComboBoxCounter))

        # print('label_table_%d' % ToolBoxComboBoxCounter)

        # exec("""self.comboBox_%d = QtWidgets.QComboBox(self.groupBox_%d)""" % (ToolBoxComboBoxCounter, ToolBoxPageCounter))
        exec("""self.comboBox_%d = QtWidgets.QComboBox()""" % ToolBoxComboBoxCounter)
        exec("""self.comboBox_%d.setFont(font)""" % ToolBoxComboBoxCounter)
        exec("""self.comboBox_%d.setObjectName('comboBox_%d')""" % (ToolBoxComboBoxCounter, ToolBoxComboBoxCounter))
        exec("""self.comboBox_%d.adjustSize()""" % ToolBoxComboBoxCounter)
        exec("""self.comboBox_%d.currentIndexChanged.connect(self.TBComboChangedEvent)""" % ToolBoxComboBoxCounter)
        exec("""self.formLayout_%d.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.comboBox_%d)""" % (
        ToolBoxPageCounter, ToolBoxComboBoxCounter))

        # print('combo_table_%d' % ToolBoxComboBoxCounter)

        exec("""self.pushButton_%d = QtWidgets.QPushButton(self.groupBox_%d)""" % (
        ToolBoxComboBoxCounter, ToolBoxPageCounter))
        exec("""self.pushButton_%d.setObjectName('pushButton_%d')""" % (ToolBoxComboBoxCounter, ToolBoxComboBoxCounter))
        exec("""self.pushButton_%d.setText('Table2')""" % ToolBoxComboBoxCounter)
        eval("""self.pushButton_%d""" % ToolBoxComboBoxCounter).clicked.connect(lambda: self.SetClList('List2'))
        exec("""self.formLayout_%d.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.pushButton_%d)""" % (
        ToolBoxPageCounter, ToolBoxComboBoxCounter))
        exec("""self.toolBox.addItem(self.page_%d, "")""" % ToolBoxPageCounter)
        exec("""self.toolBox.setItemText(%d -1 , 'Table%d')""" % (ToolBoxPageCounter, ToolBoxPageCounter))

        # print('button_Table2_%d' % ToolBoxComboBoxCounter)

        ToolBoxComboBoxCounter += 1
        ToolBoxPageCounter += 1

    def CreateResultTab(self):
        global ResultTabCounter

        exec("""self.tab_%d = QtWidgets.QWidget()""" % ResultTabCounter)
        exec("""self.tab_%d.setObjectName("tab_%d")""" % (ResultTabCounter, ResultTabCounter))


        # print("""self.tab_%d""" % ResultTabCounter)

        exec("""self.gridlayout_%d = QtWidgets.QGridLayout(self.tab_%d)""" % (200 + ResultTabCounter, ResultTabCounter))
        exec("""self.gridlayout_%d.setObjectName("gridlayout_%d")""" % (200 + ResultTabCounter, 200 + ResultTabCounter))

        exec("""self.tableView_%d = QtWidgets.QTableView(self.tab_%d)""" %(ResultTabCounter, ResultTabCounter))
        exec("""self.tableView_%d.setObjectName("tableView_%d")""" % (ResultTabCounter, ResultTabCounter))
        print("""self.tableView_%d""" % ResultTabCounter)

        exec("""self.gridlayout_%d.addWidget(self.tableView_%d, 0, 0, 1, 1)""" % (200 + ResultTabCounter, ResultTabCounter))
        exec("""self.tabWidget.addTab(self.tab_%d, "")""" % ResultTabCounter)
        print(self.tabWidget.indexOf(eval("""self.tab_%d""" % ResultTabCounter)))
        self.tabWidget.setTabText(ResultTabCounter - 1, "Result %d" % ResultTabCounter)
        self.tabWidget.setCurrentIndex(ResultTabCounter - 1)

        ResultTabCounter += 1
        self.RunQuery()

    def RunQuery(self):
        global QueryText, ResultTabCounter

        QueryText = self.Query.CtextEdit.toPlainText() + '\n' + self.Query.TtextEdit.toPlainText() + '\n' + self.Query.FtextEdit.toPlainText()
        print(QueryText)
        data = pd.read_sql(QueryText, self.con)
        data.to_csv('data.csv')
        model = TableModel(data)
        eval("""self.tableView_%d""" % (ResultTabCounter - 1)).setModel(model)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Query Designer"))
        self.TableLabel.setText(_translate("MainWindow", "Tables"))
        self.ResultSetLabel.setText(_translate("MainWindow", "Result Set"))
        self.runBTN.setText(_translate("MainWindow", "Run"))
        self.FilterLabel.setText(_translate("MainWindow", "Filters"))
        self.exportBTN.setText(_translate("MainWindow", "Export"))
        self.addTableBTN.setText(_translate("MainWindow", "Add Table"))
        self.popoutBTN.setText(_translate("MainWindow", "Popout"))
        self.radioButton_4.setText(_translate("MainWindow", "Joins"))
        self.radioButton_5.setText(_translate("MainWindow", "Filters"))
        self.radioButton_6.setText(_translate("MainWindow", "Columns"))
        self.StatusLabel.setText(_translate("MainWindow", "Status Updating Label..."))
        self.jlabel.setText(_translate("MainWindow", "TextLabel"))
        self.jtabWidget.setTabText(self.jtabWidget.indexOf(self.jtab), _translate("MainWindow", "Tab 1"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    try:
        con = snowflake.connector.connect(
            user='vinmaypatil',
            password='Bp21091996',
            account='wi53331.ap-southeast-1',
            warehouse='COMPUTE_WH'
        )
        print('Connected!')
    except:
        print('Login Failed!')
        sys.exit(1)
    ui = Ui_MainWindow(QtWidgets.QWidget, con)
    ui.setupUi(MainWindow)
    ui.retranslateUi(MainWindow)
    MainWindow.show()
    MainWindow.move(20, 40)
    sys.exit(app.exec_())
