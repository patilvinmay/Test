# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\vinmayp\Desktop\Query Designer\SQLEditor.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys, csv, io
from threading import Thread
from time import sleep

from PyQt5.QtCore import QSortFilterProxyModel, QObject, pyqtSignal, QThread
from PyQt5.QtWidgets import QMessageBox

import resource_rc
import warnings
import snowflake.connector
from RequiredClasses import TableModel, CheckableListWidgt, Ui_LoginWindow
import pandas as pd
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets

warnings.filterwarnings('ignore')  # setting ignore as a parameter

sidebar = 0
con = 1
ResultTabCounter = 1
QueryTabCounter = 0
PreviousQueryTab = 0
QueryText = ''
data=[]
QueryTabList = []
DataframeList = []
HoldFilterList = []


class Worker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(str)

    def run(self):
        global QueryText, data, con

        """Long-running task."""
        self.progress.emit("Query is running...")
        data = pd.read_sql(QueryText, con)
        data = data.fillna('*Null*')
        self.finished.emit()


class Ui_FilterWindow(object):

    def setupUi(self, FilterWindows):
        FilterWindows.setObjectName("FilterWindow")
        FilterWindows.resize(450, 500)
        self.centralwidget = QtWidgets.QWidget(FilterWindows)
        self.centralwidget.setStyleSheet("background-color: rgb(39, 39, 47);\n"
                                         "")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setObjectName("widget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_2.setContentsMargins(4, 4, 4, 4)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.widget)
        self.pushButton_3.setStyleSheet("QPushButton{\n"
                                        "color: white;\n"
                                        "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.149254 rgba(59, 59, 59, 255), stop:0.328358 rgba(60, 60, 60, 255), stop:0.517413 rgba(68, 68, 68, 255), stop:0.716418 rgba(80, 80, 80, 255), stop:1 rgba(115, 115, 115, 255));\n"
                                        "border-style: outset;\n"
                                        "border-width: 0px;\n"
                                        "width:63;\n"
                                        "height:29;\n"
                                        "}\n"
                                        "QPushButton:hover {\n"
                                        "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.0248756 rgba(115, 115, 115, 255), stop:0.353234 rgba(80, 80, 80, 255), stop:0.547264 rgba(68, 68, 68, 255), stop:0.781095 rgba(60, 60, 60, 255), stop:1 rgba(59, 59, 59, 255));\n"
                                        "    border-style: outset;\n"
                                        "    border-width: 0.5px;\n"
                                        "    border-color: rgb(170, 0, 255);\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:pressed {\n"
                                        "    border-style: outset;\n"
                                        "    border-width: 0.5px;\n"
                                        "    border-color: rgb(253, 204, 96);\n"
                                        "}")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/whiteIcons/featherwhite/rotate-ccw.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_2.addWidget(self.pushButton_3)
        self.verticalLayout.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout_2.setContentsMargins(4, 4, 4, 4)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        # self.listWidget = QtWidgets.QListWidget(self.widget_2)
        self.listWidget = CheckableListWidgt()
        self.listWidget.setStyleSheet("color: rgb(255, 255, 255);\n"
                                      "background-color: rgb(55, 55, 64);\n"
                                      "font: 63 10pt \"Calibri\";\n"
                                      "border-style: none;")
        self.listWidget.setObjectName("listWidget")
        item = QtWidgets.QListWidgetItem()
        item.setCheckState(QtCore.Qt.Checked)
        self.listWidget.addItem(item)
        self.verticalLayout_2.addWidget(self.listWidget)
        self.verticalLayout.addWidget(self.widget_2)
        self.widget_3 = QtWidgets.QWidget(self.centralwidget)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget_3)
        self.horizontalLayout.setContentsMargins(4, 4, 4, 4)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_2 = QtWidgets.QPushButton(self.widget_3)
        self.pushButton_2.setStyleSheet("QPushButton{\n"
                                        "color: white;\n"
                                        "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.149254 rgba(59, 59, 59, 255), stop:0.328358 rgba(60, 60, 60, 255), stop:0.517413 rgba(68, 68, 68, 255), stop:0.716418 rgba(80, 80, 80, 255), stop:1 rgba(115, 115, 115, 255));\n"
                                        "border-style: outset;\n"
                                        "border-width: 0px;\n"
                                        "width:63;\n"
                                        "height:29;\n"
                                        "}\n"
                                        "QPushButton:hover {\n"
                                        "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.0248756 rgba(115, 115, 115, 255), stop:0.353234 rgba(80, 80, 80, 255), stop:0.547264 rgba(68, 68, 68, 255), stop:0.781095 rgba(60, 60, 60, 255), stop:1 rgba(59, 59, 59, 255));\n"
                                        "    border-style: outset;\n"
                                        "    border-width: 0.5px;\n"
                                        "    border-color: rgb(255, 75, 75);\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:pressed {\n"
                                        "    border-style: outset;\n"
                                        "    border-width: 0.5px;\n"
                                        "    border-color: rgb(253, 204, 96);\n"
                                        "}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/whiteIcons/featherwhite/x.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon1)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(lambda: ui.FilterWindow.close())
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self.widget_3)
        self.pushButton.setStyleSheet("QPushButton{\n"
                                      "color: white;\n"
                                      "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.149254 rgba(59, 59, 59, 255), stop:0.328358 rgba(60, 60, 60, 255), stop:0.517413 rgba(68, 68, 68, 255), stop:0.716418 rgba(80, 80, 80, 255), stop:1 rgba(115, 115, 115, 255));\n"
                                      "border-style: outset;\n"
                                      "border-width: 0px;\n"
                                      "width:50;\n"
                                      "height:30;\n"
                                      "}\n"
                                      "QPushButton:hover {\n"
                                      "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.0248756 rgba(115, 115, 115, 255), stop:0.353234 rgba(80, 80, 80, 255), stop:0.547264 rgba(68, 68, 68, 255), stop:0.781095 rgba(60, 60, 60, 255), stop:1 rgba(59, 59, 59, 255));\n"
                                      "    border-style: outset;\n"
                                      "    border-width: 0.5px;\n"
                                      "    border-color: rgb(0, 255, 127);\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton:pressed {\n"
                                      "    border-style: outset;\n"
                                      "    border-width: 0.5px;\n"
                                      "    border-color: rgb(253, 204, 96);\n"
                                      "}")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/whiteIcons/featherwhite/arrow-right.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon2)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.GetValues)
        self.horizontalLayout.addWidget(self.pushButton)
        self.verticalLayout.addWidget(self.widget_3)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 8)
        self.verticalLayout.setStretch(2, 1)
        FilterWindows.setCentralWidget(self.centralwidget)

        self.retranslateUi(FilterWindows)
        QtCore.QMetaObject.connectSlotsByName(FilterWindows)

    def CloseWindow(self):
        ui.FilterWindow.close()

    def GetValues(self):
        global HoldFilterList
        FVs = []

        for i in range(self.listWidget.count()):
            if i == 0 and self.listWidget.item(i).checkState() == QtCore.Qt.Checked:
                print('All Value Passed')
            elif self.listWidget.item(i).checkState() == QtCore.Qt.Checked:
                FVs.append(self.listWidget.item(i).text())
        HoldFilterList = FVs
        ui.ApplyFilter(HoldFilterList)

    def AddItems(self, values=[]):
        list = values
        for num in list:
            item = QtWidgets.QListWidgetItem()
            item.setText(str(num))
            item.setCheckState(QtCore.Qt.Checked)
            self.listWidget.addItem(item)

    # def handleItemPressed(self, index):
    #     item = self.model().itemFromIndex(index)
    #
    #     if item.checkState() == QtCore.Qt.Checked:
    #         item.setCheckState(QtCore.Qt.Unchecked)
    #     else:
    #         item.setCheckState(QtCore.Qt.Checked)
    #     self._changed = True

    def retranslateUi(self, FilterWindows):
        _translate = QtCore.QCoreApplication.translate
        FilterWindows.setWindowTitle(_translate("FilterWindows", "FilterWindows"))
        self.pushButton_3.setText(_translate("FilterWindows", "Reset"))
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        item = self.listWidget.item(0)
        item.setText(_translate("FilterWindows", "All"))
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.pushButton_2.setText(_translate("FilterWindows", "Cancel"))
        self.pushButton.setText(_translate("FilterWindows", "Apply"))


class Ui_MainWindow(QtWidgets.QWidget):

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1102, 733)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(39, 39, 47);\n"
                                         "")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(4, 4, 4, 4)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)

        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        self.widget_2.setStyleSheet("color: rgb(255, 255, 255);\n"
                                    "background-color: rgb(55, 55, 64);\n"
                                    "font: 63 10pt \"Calibri\";")
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout.setContentsMargins(6, 6, 6, 6)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_6 = QtWidgets.QPushButton(self.widget_2)
        self.pushButton_6.setStyleSheet("QPushButton{\n"
                                        "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.149254 rgba(59, 59, 59, 255), stop:0.328358 rgba(60, 60, 60, 255), stop:0.517413 rgba(68, 68, 68, 255), stop:0.716418 rgba(80, 80, 80, 255), stop:1 rgba(115, 115, 115, 255));\n"
                                        "border-style: outset;\n"
                                        "border-width: 0px;\n"
                                        "width:63;\n"
                                        "height:29;\n"
                                        "}\n"
                                        "QPushButton:hover {\n"
                                        "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.0248756 rgba(115, 115, 115, 255), stop:0.353234 rgba(80, 80, 80, 255), stop:0.547264 rgba(68, 68, 68, 255), stop:0.781095 rgba(60, 60, 60, 255), stop:1 rgba(59, 59, 59, 255));\n"
                                        "    border-style: outset;\n"
                                        "    border-width: 0.5px;\n"
                                        "    border-color: rgb(170, 0, 255);\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:pressed {\n"
                                        "    border-style: outset;\n"
                                        "    border-width: 0.5px;\n"
                                        "    border-color: rgb(253, 204, 96);\n"
                                        "}")
        self.pushButton_6.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/whiteIcons/featherwhite/sidebar.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_6.setIcon(icon)
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout.addWidget(self.pushButton_6)

        self.pushButton = QtWidgets.QPushButton(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(7)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton{\n"
                                      "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.149254 rgba(59, 59, 59, 255), stop:0.328358 rgba(60, 60, 60, 255), stop:0.517413 rgba(68, 68, 68, 255), stop:0.716418 rgba(80, 80, 80, 255), stop:1 rgba(115, 115, 115, 255));\n"
                                      "border-style: outset;\n"
                                      "border-width: 0px;\n"
                                      "width:100;\n"
                                      "height:30;\n"
                                      "}\n"
                                      "QPushButton:hover {\n"
                                      "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.0248756 rgba(115, 115, 115, 255), stop:0.353234 rgba(80, 80, 80, 255), stop:0.547264 rgba(68, 68, 68, 255), stop:0.781095 rgba(60, 60, 60, 255), stop:1 rgba(59, 59, 59, 255));\n"
                                      "    border-style: outset;\n"
                                      "    border-width: 0.5px;\n"
                                      "    border-color: rgb(114, 222, 255);\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton:pressed {\n"
                                      "    border-style: outset;\n"
                                      "    border-width: 0.5px;\n"
                                      "    border-color: rgb(253, 204, 96);\n"
                                      "}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/whiteIcons/featherwhite/database.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon1)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_11 = QtWidgets.QPushButton(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_11.sizePolicy().hasHeightForWidth())
        self.pushButton_11.setSizePolicy(sizePolicy)
        self.pushButton_11.setStyleSheet("QPushButton{\n"
                                         "color: white;\n"
                                         "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.149254 rgba(59, 59, 59, 255), stop:0.328358 rgba(60, 60, 60, 255), stop:0.517413 rgba(68, 68, 68, 255), stop:0.716418 rgba(80, 80, 80, 255), stop:1 rgba(115, 115, 115, 255));\n"
                                         "border-style: outset;\n"
                                         "border-width: 0px;\n"
                                         "width:100;\n"
                                         "height:30;\n"
                                         "}\n"
                                         "QPushButton:hover {\n"
                                         "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.0248756 rgba(115, 115, 115, 255), stop:0.353234 rgba(80, 80, 80, 255), stop:0.547264 rgba(68, 68, 68, 255), stop:0.781095 rgba(60, 60, 60, 255), stop:1 rgba(59, 59, 59, 255));\n"
                                         "    border-style: outset;\n"
                                         "    border-width: 0.5px;\n"
                                         "    border-color: rgb(0, 255, 127);\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:pressed {\n"
                                         "    border-style: outset;\n"
                                         "    border-width: 0.5px;\n"
                                         "    border-color: rgb(253, 204, 96);\n"
                                         "}")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/whiteIcons/featherwhite/play.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_11.setIcon(icon2)
        self.pushButton_11.setObjectName("pushButton_11")
        self.horizontalLayout.addWidget(self.pushButton_11)
        self.pushButton_12 = QtWidgets.QPushButton(self.widget_2)
        self.pushButton_12.setStyleSheet("QPushButton{\n"
                                         "color: white;\n"
                                         "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.149254 rgba(59, 59, 59, 255), stop:0.328358 rgba(60, 60, 60, 255), stop:0.517413 rgba(68, 68, 68, 255), stop:0.716418 rgba(80, 80, 80, 255), stop:1 rgba(115, 115, 115, 255));\n"
                                         "border-style: outset;\n"
                                         "border-width: 0px;\n"
                                         "width:100;\n"
                                         "height:30;\n"
                                         "}\n"
                                         "QPushButton:hover {\n"
                                         "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.0248756 rgba(115, 115, 115, 255), stop:0.353234 rgba(80, 80, 80, 255), stop:0.547264 rgba(68, 68, 68, 255), stop:0.781095 rgba(60, 60, 60, 255), stop:1 rgba(59, 59, 59, 255));\n"
                                         "    border-style: outset;\n"
                                         "    border-width: 0.5px;\n"
                                         "    border-color: rgb(255, 255, 0);\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:pressed {\n"
                                         "    border-style: outset;\n"
                                         "    border-width: 0.5px;\n"
                                         "    border-color: rgb(253, 204, 96);\n"
                                         "}")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/whiteIcons/featherwhite/download.svg"), QtGui.QIcon.Normal,
                        QtGui.QIcon.Off)
        self.pushButton_12.setIcon(icon3)
        self.pushButton_12.setObjectName("pushButton_12")
        self.horizontalLayout.addWidget(self.pushButton_12)
        self.pushButton_13 = QtWidgets.QPushButton(self.widget_2)
        self.pushButton_13.setStyleSheet("QPushButton{\n"
                                         "color:white;\n"
                                         "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.149254 rgba(59, 59, 59, 255), stop:0.328358 rgba(60, 60, 60, 255), stop:0.517413 rgba(68, 68, 68, 255), stop:0.716418 rgba(80, 80, 80, 255), stop:1 rgba(115, 115, 115, 255));\n"
                                         "border-style: outset;\n"
                                         "border-width: 0px;\n"
                                         "width:110;\n"
                                         "height:30;\n"
                                         "}\n"
                                         "QPushButton:hover {\n"
                                         "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.0248756 rgba(115, 115, 115, 255), stop:0.353234 rgba(80, 80, 80, 255), stop:0.547264 rgba(68, 68, 68, 255), stop:0.781095 rgba(60, 60, 60, 255), stop:1 rgba(59, 59, 59, 255));\n"
                                         "    border-style: outset;\n"
                                         "    border-width: 0.5px;\n"
                                         "    border-color: rgb(170, 0, 255);\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:pressed {\n"
                                         "    border-style: outset;\n"
                                         "    border-width: 0.5px;\n"
                                         "    border-color: rgb(253, 204, 96);\n"
                                         "}")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/whiteIcons/featherwhite/file-text.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_13.setIcon(icon4)
        self.pushButton_13.setObjectName("pushButton_13")
        self.horizontalLayout.addWidget(self.pushButton_13)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout.addWidget(self.widget_2)
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setObjectName("widget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_2.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.widget_3 = QtWidgets.QWidget(self.widget)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_2.addWidget(self.widget_3)
        self.widget_3.hide()
        self.widget_4 = QtWidgets.QWidget(self.widget)
        self.widget_4.setObjectName("widget_4")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget_4)
        self.horizontalLayout_3.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.tabWidget = QtWidgets.QTabWidget(self.widget_4)
        self.tabWidget.setStyleSheet("QTabWidget::pane { border: 0; }\n"
                                     "\n"
                                     "QTabWidget{\n"
                                     "    border-style: none;\n"
                                     "    border-width: 0px;\n"
                                     "    border-color: rgb(170, 0, 255);\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab {\n"
                                     "color:white;\n"
                                     "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.149254 rgba(59, 59, 59, 255), stop:0.328358 rgba(60, 60, 60, 255), stop:0.517413 rgba(68, 68, 68, 255), stop:0.716418 rgba(80, 80, 80, 255), stop:1 rgba(115, 115, 115, 255));\n"
                                     "border-style:none;\n"
                                     "width:80px;\n"
                                     "height:26px;\n"
                                     "} \n"
                                     "\n"
                                     "QTabBar::tab:selected { \n"
                                     "      background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.0248756 rgba(115, 115, 115, 255), stop:0.353234 rgba(80, 80, 80, 255), stop:0.547264 rgba(68, 68, 68, 255), stop:0.781095 rgba(60, 60, 60, 255), stop:1 rgba(59, 59, 59, 255));\n"
                                     "    border-style: outset;\n"
                                     "    border-width: 0.5px;\n"
                                     "    border-color: rgb(170, 0, 255);\n"
                                     "}")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.tab)
        self.horizontalLayout_4.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.widget_5 = QtWidgets.QWidget(self.tab)
        self.widget_5.setObjectName("widget_5")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.widget_5)
        self.horizontalLayout_5.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.frame = QtWidgets.QFrame(self.widget_5)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setContentsMargins(2, 2, 2, 2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("QPushButton{\n"
                                        "color: white;\n"
                                        "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.149254 rgba(59, 59, 59, 255), stop:0.328358 rgba(60, 60, 60, 255), stop:0.517413 rgba(68, 68, 68, 255), stop:0.716418 rgba(80, 80, 80, 255), stop:1 rgba(115, 115, 115, 255));\n"
                                        "border-style: outset;\n"
                                        "border-width: 0px;\n"
                                        "width:63;\n"
                                        "height:29;\n"
                                        "font: 9.5pt \"Calibri\";\n"
                                        "}\n"
                                        "QPushButton:hover {\n"
                                        "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.0248756 rgba(115, 115, 115, 255), stop:0.353234 rgba(80, 80, 80, 255), stop:0.547264 rgba(68, 68, 68, 255), stop:0.781095 rgba(60, 60, 60, 255), stop:1 rgba(59, 59, 59, 255));\n"
                                        "    border-style: outset;\n"
                                        "    border-width: 0.5px;\n"
                                        "    border-color: rgb(0, 255, 127);\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:pressed {\n"
                                        "    border-style: outset;\n"
                                        "    border-width: 0.5px;\n"
                                        "    border-color: rgb(253, 204, 96);\n"
                                        "}")
        self.pushButton_3.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/whiteIcons/featherwhite/plus.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon5)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_2.addWidget(self.pushButton_3)
        self.listWidget = QtWidgets.QListWidget(self.frame)
        self.listWidget.setStyleSheet("""QListWidget{\nborder-style:none;\ncolor:white;\n}\n
                                         QListWidget::item:selected{\nbackground-color: rgb(85, 85, 255);\n}""")
        self.listWidget.setObjectName("listWidget")
        self.verticalLayout_2.addWidget(self.listWidget)
        self.horizontalLayout_5.addWidget(self.frame)
        self.frame_2 = QtWidgets.QFrame(self.widget_5)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_6.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.textEdit = QtWidgets.QTextEdit(self.frame_2)
        self.textEdit.setStyleSheet("QTextEdit{\n"
                                    "color: rgb(255, 255, 255);\n"
                                    "background-color: rgb(55, 55, 64);\n"
                                    "font: 12pt \"Calibri\";\n"
                                    "border-style: none;\n"
                                    "}\n"
                                    "QTextEdit:focus{\n"
                                    "border-style:outset;\n"
                                    "border-width:0.5px;\n"
                                    "border-color: rgb(255, 170, 0);\n"
                                    "}")
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setDisabled(True)
        self.horizontalLayout_6.addWidget(self.textEdit)
        self.horizontalLayout_5.addWidget(self.frame_2)
        self.horizontalLayout_5.setStretch(0, 1)
        self.horizontalLayout_5.setStretch(1, 9)
        self.horizontalLayout_4.addWidget(self.widget_5)
        self.tabWidget.addTab(self.tab, "")
        self.horizontalLayout_3.addWidget(self.tabWidget)
        self.horizontalLayout_2.addWidget(self.widget_4)
        self.horizontalLayout_2.setStretch(0, 1)
        self.horizontalLayout_2.setStretch(1, 9)
        self.verticalLayout.addWidget(self.widget)
        self.label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setStyleSheet("color:red;")
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.pushButton_6.clicked.connect(self.sidebar)  # type: ignore
        self.pushButton.clicked.connect(self.openloginwindow)
        self.pushButton_11.clicked.connect(self.StartRunningQuery)
        self.pushButton_3.clicked.connect(self.AddQueryTab)
        self.listWidget.currentItemChanged.connect(self.QueryTabChanged)
        self.pushButton_13.clicked.connect(self.DataToExcel)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SQL Editor"))
        self.pushButton.setText(_translate("MainWindow", "Connect"))
        self.pushButton_11.setText(_translate("MainWindow", "Run"))
        self.pushButton_12.setText(_translate("MainWindow", "Import"))
        self.pushButton_13.setText(_translate("MainWindow", "Export"))
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Query"))
        # self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "exist Result1"))
        # self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Result2"))
        self.label.setText(_translate("MainWindow", "Disconnected!"))

    def sidebar(self):
        global sidebar
        if sidebar == 1:
            self.widget_3.hide()
            sidebar = 0
        elif sidebar == 0:
            self.widget_3.show()
            sidebar = 1

    def openloginwindow(self):
        self.LoginWindow = QtWidgets.QMainWindow()
        self.lg = Ui_LoginWindow()
        self.lg.setupUi(self.LoginWindow)
        self.lg.retranslateUi(self.LoginWindow)
        self.LoginWindow.show()
        self.lg.pushButton.clicked.connect(self.startconnectingdb)


    def startconnectingdb(self):
        thread = Thread(target=self.connectdb)
        thread.start()

    def connectdb(self):
        global con

        self.label.setStyleSheet("color: rgb(255, 255, 0);")
        self.label.setText("""Connecting to Server...""")
        try:
            con = snowflake.connector.connect(
                user=self.lg.creds[0],
                password=self.lg.creds[1],
                account=self.lg.creds[2],
                warehouse=self.lg.creds[3]
            )
            self.label.setStyleSheet("color: rgb(0, 255, 0);")
            self.label.setText('Connected!')
        except:
            self.label.setStyleSheet("color: rgb(255, 0, 0);")
            self.label.setText('Login Failed!')

    def AddQueryTab(self):
        global QueryTabCounter, QueryTabList

        if self.listWidget.count() == 0:
            self.textEdit.setDisabled(False)
            self.listWidget.addItem("Tab %d" % QueryTabCounter)
            QueryTabList.insert(0, "")
            self.listWidget.setCurrentRow(0)
        else:
            self.listWidget.addItem("Tab %d" % QueryTabCounter)
            QueryTabList.insert(QueryTabCounter, "")
            self.listWidget.setCurrentRow(QueryTabCounter)

        QueryTabCounter += 1

    def QueryTabChanged(self):
        global QueryTabCounter, QueryTabList, PreviousQueryTab

        if self.listWidget.count() != 1:
            QueryTabList.pop(PreviousQueryTab)
            QueryTabList.insert(PreviousQueryTab, self.textEdit.toPlainText())
            self.textEdit.setText(QueryTabList[self.listWidget.currentRow()])

            PreviousQueryTab = self.listWidget.currentRow()

    def StartRunningQuery(self):
        global QueryText, ResultTabCounter

        QueryText = self.textEdit.toPlainText()

        exec("""self.thread_%d = QThread()""" % ResultTabCounter)
        exec("""self.worker_%d = Worker()""" % ResultTabCounter)
        exec("""self.worker_%d.moveToThread(self.thread_%d)""" % (ResultTabCounter, ResultTabCounter))
        exec("""self.thread_%d.started.connect(self.worker_%d.run)""" % (ResultTabCounter, ResultTabCounter))
        exec("""self.worker_%d.progress.connect(self.setuplabel)""" % ResultTabCounter)
        exec("""self.worker_%d.finished.connect(self.RunQuery)""" % ResultTabCounter)
        exec("""self.worker_%d.finished.connect(self.worker_%d.deleteLater)""" % (ResultTabCounter, ResultTabCounter))
        exec("""self.thread_%d.finished.connect(self.thread_%d.deleteLater)""" % (ResultTabCounter, ResultTabCounter))

        exec("""self.thread_%d.start()""" % ResultTabCounter)

    def setuplabel(self, n):
        self.label.setStyleSheet("color: rgb(255, 255, 0);")
        self.label.setText(f"""{n}""")

    def RunQuery(self):
        global ResultTabCounter, DataframeList, data

        try:
            DataframeList.insert(ResultTabCounter - 1, data)
            exec("""model_%d = TableModel(data)""" % ResultTabCounter)
            # exec("""proxymodel_%d = QSortFilterProxyModel()""" % ResultTabCounter)
            # exec("""proxymodel_%d.setSourceModel(model_%d)""" % (ResultTabCounter, ResultTabCounter))

            exec("""self.resulttab_%d = QtWidgets.QWidget()""" % ResultTabCounter)
            exec("""self.resulttab_%d.setObjectName("resulttab_%d")""" % (ResultTabCounter, ResultTabCounter))
            exec("""self.tabhorizontalLayout_%d = QtWidgets.QHBoxLayout(self.resulttab_%d)""" % (
                ResultTabCounter, ResultTabCounter))
            exec("""self.tabhorizontalLayout_%d.setContentsMargins(2, 2, 2, 2)""" % ResultTabCounter)
            exec("""self.tabhorizontalLayout_%d.setObjectName("tabhorizontalLayout_%d")""" % (
                ResultTabCounter, ResultTabCounter))
            exec("""self.resultframe_%d = QtWidgets.QFrame(self.resulttab_%d)""" % (ResultTabCounter, ResultTabCounter))
            exec("""self.resultframe_%d.setFrameShape(QtWidgets.QFrame.StyledPanel)""" % ResultTabCounter)
            exec("""self.resultframe_%d.setFrameShadow(QtWidgets.QFrame.Raised)""" % ResultTabCounter)
            exec("""self.resultframe_%d.setObjectName("resultframe_%d")""" % (ResultTabCounter, ResultTabCounter))
            exec("""self.framehorizontalLayout_%d = QtWidgets.QHBoxLayout(self.resultframe_%d)""" % (
                ResultTabCounter, ResultTabCounter))
            exec("""self.framehorizontalLayout_%d.setContentsMargins(2, 2, 2, 2)""" % ResultTabCounter)
            exec("""self.framehorizontalLayout_%d.setObjectName("framehorizontalLayout_%d")""" % (
                ResultTabCounter, ResultTabCounter))
            exec("""self.resulttableView_%d = QtWidgets.QTableView(self.resultframe_%d)""" % (
                ResultTabCounter, ResultTabCounter))
            eval("""self.resulttableView_%d""" % ResultTabCounter).setStyleSheet("""QTableView{background-color: rgb(55, 55, 64);\ncolor: white; font: 10pt\n 
            "Calibri";}\nQHeaderView::section { background-color:rgb(61, 155, 229);\ncolor:white;}""")
            exec("""self.resulttableView_%d.setObjectName("resulttableView_%d")""" % (
                ResultTabCounter, ResultTabCounter))
            exec("""self.resulttableView_%d.setSortingEnabled(True)""" % ResultTabCounter)
            exec("""self.resulttableView_%d.verticalHeader().show()""" % ResultTabCounter)
            exec("""self.resulttableView_%d.installEventFilter(self)""" % ResultTabCounter)
            exec("""self.resulttableView_%d.setEditTriggers(self.resulttableView_%d.NoEditTriggers)""" % (
            ResultTabCounter, ResultTabCounter))
            exec("""self.framehorizontalLayout_%d.addWidget(self.resulttableView_%d)""" % (
                ResultTabCounter, ResultTabCounter))
            exec(
                """self.tabhorizontalLayout_%d.addWidget(self.resultframe_%d)""" % (ResultTabCounter, ResultTabCounter))
            exec("""self.tabWidget.addTab(self.resulttab_%d, "")""" % ResultTabCounter)
            self.tabWidget.setTabText(ResultTabCounter, "Result %d" % ResultTabCounter)

            eval("""self.resulttableView_%d""" % ResultTabCounter).setModel(
                eval("""model_%d""" % ResultTabCounter))

            self.tabWidget.setCurrentIndex(ResultTabCounter)
            self.label.setStyleSheet("color:white;")
            self.label.setText("""Result %d is Ready!""" % ResultTabCounter)
            eval("""self.resulttableView_%d""" % ResultTabCounter).doubleClicked.connect(self.MakeFilterWindow)

            ResultTabCounter += 1

        except pd.errors.DatabaseError as e:
            self.label.setStyleSheet("color:red;")
            self.label.setText(str(e.args[0]))

    def DataToExcel(self):
        global DataframeList

        data = pd.DataFrame(DataframeList[self.tabWidget.currentIndex() - 1])
        writer = pd.ExcelWriter("Result Sheet %d.xlsx" % (self.tabWidget.currentIndex()))
        data.to_excel(writer, index=False)
        writer.save()

        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText("Excel file is Export with name:\nResult Sheet %d.xlsx" % (self.tabWidget.currentIndex()))
        msg.setWindowTitle("Excel Exported")
        msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        retval = msg.exec_()

    def eventFilter(self, source, event):
        if (event.type() == QtCore.QEvent.KeyPress and
                event.matches(QtGui.QKeySequence.Copy)):
            self.copySelection()
            return True
        return super(Ui_MainWindow, self).eventFilter(source, event)

    def copySelection(self):
        selection = eval("""self.resulttableView_%d""" % (self.tabWidget.currentIndex())).selectedIndexes()
        if selection:
            rows = sorted(index.row() for index in selection)
            columns = sorted(index.column() for index in selection)
            rowcount = rows[-1] - rows[0] + 1
            colcount = columns[-1] - columns[0] + 1
            table = [[''] * colcount for _ in range(rowcount)]
            for index in selection:
                row = index.row() - rows[0]
                column = index.column() - columns[0]
                table[row][column] = index.data()
            stream = io.StringIO()
            csv.writer(stream, delimiter='	').writerows(table)
            QtWidgets.qApp.clipboard().setText(stream.getvalue())

    def MakeFilterWindow(self):
        global DataframeList, HoldFilterList

        self.FilterWindow = QtWidgets.QMainWindow()
        self.fi = Ui_FilterWindow()
        self.fi.setupUi(self.FilterWindow)
        self.fi.retranslateUi(self.FilterWindow)


        dataframenumber = self.tabWidget.currentIndex() - 1
        columnnumber = int(eval("""self.resulttableView_%d""" % (dataframenumber + 1)).currentIndex().column())

        df = pd.DataFrame(DataframeList[dataframenumber])
        self.FilterWindow.setWindowTitle("Filter for column: {}".format(str(df.columns[columnnumber])))

        uniquevalues = df.iloc[:, columnnumber].unique()
        self.fi.AddItems(uniquevalues)

        self.FilterWindow.show()
        df = []

    def ApplyFilter(self, FilterList=[]):
        global DataframeList

        FVs = FilterList

        dataframenumber = self.tabWidget.currentIndex() - 1
        columnnumber = int(eval("""self.resulttableView_%d""" % (dataframenumber + 1)).currentIndex().column())
        df = pd.DataFrame(DataframeList[dataframenumber])
        datatype = df[eval("""str(df.columns[columnnumber])""")].convert_dtypes().dtype
        print("{}: {}".format(df.columns[columnnumber], datatype))
        print(FVs)
        try:
            if datatype == 'Float64':
                df[eval("""str(df.columns[columnnumber])""")] = df[eval("""str(df.columns[columnnumber])""")].astype(np.float64)
                A = [float(x) for x in FVs]
                df = df[df[eval("""str(df.columns[columnnumber])""")].isin(A)]
            elif datatype == 'Int64':
                df[eval("""str(df.columns[columnnumber])""")] = df[eval("""str(df.columns[columnnumber])""")].astype(np.int64)
                A = [int(x) for x in FVs]
                df = df[df[eval("""str(df.columns[columnnumber])""")].isin(A)]
            elif datatype == 'datetime64[ns, UTC]':
                df[eval("""str(df.columns[columnnumber])""")] = pd.to_datetime(df[eval("""str(df.columns[
                    columnnumber])""")], format='%Y-%m-%d')
                df = df[df[eval("""str(df.columns[columnnumber])""")].isin(FVs)]
            elif datatype == 'object':
                try:
                    df[eval("""str(df.columns[columnnumber])""")] = pd.to_datetime(df[eval("""str(df.columns[
                    columnnumber])""")], format='%Y-%m-%d')
                    df = df[df[eval("""str(df.columns[columnnumber])""")].isin(FVs)]
                except:
                    A = [str(x) for x in FVs]
                    df = df[df[eval("""str(df.columns[columnnumber])""")].isin(A)]
            elif datatype == 'string':
                try:
                    df[eval("""str(df.columns[columnnumber])""")] = pd.to_datetime(df[eval("""str(df.columns[
                    columnnumber])""")], format='%Y-%m-%d')
                    df = df[df[eval("""str(df.columns[columnnumber])""")].isin(FVs)]
                except:
                    A = [str(x) for x in FVs]
                    df = df[df[eval("""str(df.columns[columnnumber])""")].isin(A)]

            exec("""model_%d = TableModel(df)""" % (dataframenumber+1))
            exec("""proxymodel_%d = QSortFilterProxyModel()""" % (dataframenumber+1))
            exec("""proxymodel_%d.setSourceModel(model_%d)""" % ((dataframenumber+1), (dataframenumber+1)))
            eval("""self.resulttableView_%d""" % (dataframenumber+1)).setModel(
                eval("""proxymodel_%d""" % (dataframenumber+1)))
            df = []
            self.label.setStyleSheet("color:white;")
            self.label.setText('')
            self.fi.CloseWindow()
        except:
            self.label.setStyleSheet("color: rgb(255, 255, 0);")
            self.label.setText('Error occurred while filtering data!')
            df = []
            self.fi.CloseWindow()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.retranslateUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())